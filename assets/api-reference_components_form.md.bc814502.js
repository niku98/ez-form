import{_ as t,c as e,o as l,a}from"./app.bdb07605.js";const m=JSON.parse('{"title":"Form","description":"","frontmatter":{"title":"Form"},"headers":[{"level":2,"title":"Props","slug":"props","link":"#props","children":[]},{"level":2,"title":"Events","slug":"events","link":"#events","children":[]}],"relativePath":"api-reference/components/form.md"}'),d={name:"api-reference/components/form.md"},r=a('<h1 id="form" tabindex="-1">Form <a class="header-anchor" href="#form" aria-hidden="true">#</a></h1><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;">form</td><td style="text-align:left;">A FormInstance to control form from outside</td><td style="text-align:left;"><a href="/ez-form/api-reference/types/form.html#forminstance"><code>FormInstance</code></a></td></tr><tr><td style="text-align:left;">initialValues</td><td style="text-align:left;">Initial values for form data</td><td style="text-align:left;"><code>Record&lt;string, any&gt;</code></td></tr><tr><td style="text-align:left;">rules</td><td style="text-align:left;">Validation rules</td><td style="text-align:left;"><code>Rules</code></td></tr><tr><td style="text-align:left;">validateTrigger</td><td style="text-align:left;">Config field validate trigger</td><td style="text-align:left;"><a href="/ez-form/api-reference/types/validation.html#general"><code>ValidateTrigger | ValidateTrigger[]</code></a></td></tr><tr><td style="text-align:left;">validateMessages</td><td style="text-align:left;">Custom validation messages</td><td style="text-align:left;"><a href="/ez-form/api-reference/types/validation.html#validatemessages"><code>ValidateMessages</code></a></td></tr><tr><td style="text-align:left;">classPrefix</td><td style="text-align:left;">Custom class prefix to generate form&#39;s class</td><td style="text-align:left;"><code>string</code></td></tr><tr><td style="text-align:left;">preserveValues</td><td style="text-align:left;">Keep field value even when field removed</td><td style="text-align:left;"><code>boolean</code></td></tr></tbody></table><h2 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;">onSubmit</td><td style="text-align:left;">Trigger after submitting the form and validating data successfully</td><td style="text-align:left;"><code>(values: any) =&gt; void</code></td></tr><tr><td style="text-align:left;">onError</td><td style="text-align:left;">Trigger after submitting the form and validating data failed</td><td style="text-align:left;"><code>(errors: ValidateError[]) =&gt; void</code></td></tr><tr><td style="text-align:left;">onChange</td><td style="text-align:left;">Trigger when value updated</td><td style="text-align:left;"><code>(values: any) =&gt; void</code></td></tr></tbody></table>',5),i=[r];function s(n,o,f,g,c,h){return l(),e("div",null,i)}const x=t(d,[["render",s]]);export{m as __pageData,x as default};
